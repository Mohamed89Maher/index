<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Buy AXC - Alpha X Coin ICO. Secure, fast, and decentralized cryptocurrency for global commerce with real-time pricing and instant transactions.">
    <meta name="keywords" content="AXC crypto, BNB cryptocurrency, ICO, Alpha X Coin, blockchain, buy tokens">
    <meta name="author" content="Alpha X Coin">
    <title>Buy AXC - Alpha X Coin ICO</title>
    
    <!-- Web3 Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.10.0/web3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ethers/dist/ethers.min.js"></script>
    
    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css" rel="stylesheet">
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🪙</text></svg>">
    
    <style>
        :root {
            --primary-color: #0066cc;
            --secondary-color: #0454a4;
            --accent-color: #FFD700;
            --success-color: #28a745;
            --error-color: #dc3545;
            --warning-color: #ffc107;
            --dark-bg: #0c1426;
            --card-bg: rgba(255, 255, 255, 0.1);
            --text-primary: #ffffff;
            --text-secondary: #b8c5d6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c1426 0%, #1a2b4d 50%, #0454a4 100%);
            color: var(--text-primary);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated Background */
        .network-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.1;
        }

        #network-canvas {
            width: 100%;
            height: 100%;
        }

        /* Navigation */
        .navbar {
            background: rgba(12, 20, 38, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem 0;
        }

        .navbar-brand {
            color: var(--text-primary) !important;
            font-size: 1.5rem;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .navbar-nav .nav-link {
            color: var(--text-secondary) !important;
            margin: 0 15px;
            transition: color 0.3s ease;
        }

        .navbar-nav .nav-link:hover,
        .navbar-nav .nav-link.active {
            color: var(--accent-color) !important;
        }

        .default-btn {
            background: linear-gradient(45deg, var(--accent-color), #FFA500);
            color: #333 !important;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .default-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(255, 215, 0, 0.3);
            color: #333 !important;
        }

        /* Main Content */
        .main-content {
            padding: 100px 0 50px;
            position: relative;
            z-index: 1;
        }

        .hero-section {
            text-align: center;
            margin-bottom: 50px;
        }

        .hero-section h1 {
            font-size: 3.5rem;
            background: linear-gradient(45deg, var(--accent-color), #FFA500);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 20px;
            text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
        }

        .hero-section p {
            font-size: 1.2rem;
            color: var(--text-secondary);
            max-width: 600px;
            margin: 0 auto 30px;
        }

        /* Purchase Card */
        .purchase-card {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            margin-bottom: 30px;
        }

        .token-info {
            text-align: center;
            margin-bottom: 30px;
        }

        .token-info h3 {
            color: var(--accent-color);
            margin-bottom: 20px;
            font-size: 1.8rem;
        }

        .token-price {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .token-price h4 {
            margin: 0;
            font-size: 1.5rem;
        }

        .progress-stats {
            margin-bottom: 20px;
        }

        .stat-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .progress {
            height: 12px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .progress-bar {
            background: linear-gradient(90deg, var(--accent-color), #FFA500);
            height: 100%;
            transition: width 0.5s ease;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        /* Input Sections */
        .input-section {
            margin-bottom: 25px;
        }

        .input-section h4 {
            color: var(--text-primary);
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .currency-options {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .currency-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: var(--text-primary);
            padding: 10px 15px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .currency-btn.active,
        .currency-btn:hover {
            background: rgba(255, 215, 0, 0.2);
            border-color: var(--accent-color);
        }

        .balance-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .input-group {
            position: relative;
        }

        .form-control {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: var(--text-primary);
            padding: 15px;
            border-radius: 10px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: var(--accent-color);
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.3);
            color: var(--text-primary);
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .currency-label {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        /* Calculation Display */
        .calculation-display {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255, 215, 0, 0.3);
        }

        .calc-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 5px 0;
        }

        .calc-row.total {
            border-top: 2px solid var(--accent-color);
            padding-top: 15px;
            margin-top: 15px;
            font-weight: bold;
            font-size: 1.1rem;
        }

        /* Promo Section */
        .promo-section {
            background: rgba(255, 215, 0, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            border: 2px solid var(--accent-color);
        }

        .promo-codes {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .promo-code {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
        }

        .promo-code:hover {
            background: rgba(255, 215, 0, 0.2);
            transform: translateY(-2px);
        }

        .promo-code.selected {
            background: linear-gradient(45deg, var(--accent-color), #FFA500);
            color: #333;
            transform: scale(1.05);
        }

        /* Status Messages */
        .status-message {
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            text-align: center;
            font-weight: 600;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .status-success {
            background: rgba(40, 167, 69, 0.8);
            border: 2px solid var(--success-color);
            color: white;
        }

        .status-error {
            background: rgba(220, 53, 69, 0.8);
            border: 2px solid var(--error-color);
            color: white;
        }

        .status-warning {
            background: rgba(255, 193, 7, 0.8);
            border: 2px solid var(--warning-color);
            color: #333;
        }

        /* Network Warning */
        .network-warning {
            background: rgba(255, 193, 7, 0.9);
            color: #333;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
            font-weight: bold;
            border: 2px solid var(--warning-color);
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: var(--accent-color);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Stats Section */
        .stats-section {
            margin: 50px 0;
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero-section h1 {
                font-size: 2.5rem;
            }
            
            .purchase-card {
                margin: 20px 0;
            }
            
            .currency-options {
                flex-direction: column;
            }
            
            .promo-codes {
                grid-template-columns: 1fr;
            }
        }

        /* Timer Styles */
        .timer-section {
            background: rgba(255, 215, 0, 0.1);
            border-radius: 15px;
            padding: 25px;
            margin: 30px 0;
            text-align: center;
            border: 2px solid var(--accent-color);
        }

        .timer-display {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .timer-unit {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px 10px;
            border-radius: 10px;
            min-width: 70px;
            border: 1px solid rgba(255, 215, 0, 0.5);
        }

        .timer-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--accent-color);
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .timer-label {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .update-price-btn {
            background: rgba(255, 215, 0, 0.2);
            border: 1px solid var(--accent-color);
            color: var(--accent-color);
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

        .update-price-btn:hover {
            background: rgba(255, 215, 0, 0.3);
            transform: translateY(-1px);
        }
    </style>
</head>
<body>
    <!-- Network Background -->
    <div class="network-bg">
        <canvas id="network-canvas"></canvas>
    </div>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="#">
                🪙 Alpha X Coin
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="#">Buy AXC</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">FAQ</a>
                    </li>
                </ul>
                <div class="d-flex">
                    <button id="connectWalletNav" class="default-btn">
                        <span>Connect Wallet</span>
                        <i class='bx bx-wallet'></i>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container">
            <!-- Hero Section -->
            <div class="hero-section">
                <h1>Buy AXC Tokens</h1>
                <p>Shape the future of decentralized finance by owning Alpha X Coin tokens. Secure, fast, and profitable investment opportunity.</p>
            </div>

            <!-- Network Warning -->
            <div id="networkWarning" class="network-warning" style="display: none;">
                ⚠️ Please switch to Binance Smart Chain (BSC) network to continue
            </div>

            <!-- Timer Section -->
            <div class="timer-section">
                <h3>⏰ Current Phase Ends In:</h3>
                <div class="timer-display" id="countdown">
                    <div class="timer-unit">
                        <div class="timer-number" id="days">--</div>
                        <div class="timer-label">Days</div>
                    </div>
                    <div class="timer-unit">
                        <div class="timer-number" id="hours">--</div>
                        <div class="timer-label">Hours</div>
                    </div>
                    <div class="timer-unit">
                        <div class="timer-number" id="minutes">--</div>
                        <div class="timer-label">Minutes</div>
                    </div>
                    <div class="timer-unit">
                        <div class="timer-number" id="seconds">--</div>
                        <div class="timer-label">Seconds</div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Purchase Card -->
                <div class="col-lg-6">
                    <div class="purchase-card">
                        <!-- Token Info -->
                        <div class="token-info">
                            <h3>Buy AXC Token <i class='bx bx-check-circle'></i></h3>
                            <div class="token-price">
                                <h4>1 AXC</h4>
                                <h4 id="axcPrice">$0.017</h4>
                            </div>
                            <div class="progress-stats">
                                <div class="stat-row">
                                    <span id="tokensSold">0 tokens sold</span>
                                    <span id="tokensRemaining">825M tokens remaining</span>
                                </div>
                                <div class="progress">
                                    <div id="progressBar" class="progress-bar" style="width: 0%"></div>
                                </div>
                                <div class="stat-row">
                                    <span>Total sale volume: 825M</span>
                                    <span id="currentPhase">Phase 1</span>
                                </div>
                            </div>
                        </div>

                        <!-- Wallet Status -->
                        <div id="walletStatus" class="status-message status-warning">
                            📱 Please connect your MetaMask wallet first
                        </div>

                        <!-- Deposit Section -->
                        <div class="input-section">
                            <h4>You deposit <i class='bx bx-info-circle'></i></h4>
                            <div class="currency-options">
                                <button class="currency-btn active">
                                    <span>🪙</span>
                                    <span>BNB</span>
                                </button>
                            </div>
                            <div class="balance-info">
                                <span>Current balance: <span id="userBalance">0 BNB</span></span>
                                <span id="bnbPriceDisplay">BNB: $--</span>
                            </div>
                            <div class="input-group">
                                <input type="number" id="bnbAmount" class="form-control" placeholder="0.01" step="0.001" min="0.001">
                                <span class="currency-label" id="usdValue">$ 0</span>
                            </div>
                        </div>

                        <!-- Calculation Display -->
                        <div class="calculation-display" id="calculationDisplay" style="display: none;">
                            <div class="calc-row">
                                <span>Current BNB Price:</span>
                                <span id="currentBNBPrice">$--</span>
                            </div>
                            <div class="calc-row">
                                <span>USD Value:</span>
                                <span id="calculatedUSD">$0.00</span>
                            </div>
                            <div class="calc-row">
                                <span>Transaction Fee:</span>
                                <span id="feeAmount">$3.00</span>
                            </div>
                            <div class="calc-row">
                                <span>Net Amount:</span>
                                <span id="netAmount">$0.00</span>
                            </div>
                            <div class="calc-row total">
                                <span>You will receive:</span>
                                <span id="tokensReceived">0 AXC</span>
                            </div>
                            <button class="update-price-btn" onclick="updatePriceManually()">
                                🔄 Update Price
                            </button>
                        </div>

                        <!-- Promo Code Section -->
                        <div class="promo-section">
                            <h4>🎁 Promo Codes (Phase 2 & 3 only)</h4>
                            <div class="input-group mb-3">
                                <input type="text" id="promoCode" class="form-control" placeholder="Enter promo code">
                            </div>
                            <div class="promo-codes">
                                <div class="promo-code" data-code="Mo3AXC9cl">
                                    Mo3AXC9cl<br>
                                    <small>500 AXC bonus</small>
                                </div>
                                <div class="promo-code" data-code="Cl1AXC3me">
                                    Cl1AXC3me<br>
                                    <small>2000 AXC bonus</small>
                                </div>
                                <div class="promo-code" data-code="Ah5AXC10ng">
                                    Ah5AXC10ng<br>
                                    <small>5000 AXC bonus</small>
                                </div>
                                <div class="promo-code" data-code="Kh15AXC20bo">
                                    Kh15AXC20bo<br>
                                    <small>15000 AXC bonus</small>
                                </div>
                                <div class="promo-code" data-code="Ha25AXC40bo">
                                    Ha25AXC40bo<br>
                                    <small>30000 AXC bonus</small>
                                </div>
                            </div>
                        </div>

                        <!-- Purchase Button -->
                        <button id="purchaseBtn" class="default-btn w-100" disabled>
                            <span>Buy AXC Tokens</span>
                            <i class='bx bx-shopping-bag'></i>
                        </button>

                        <!-- Transaction Status -->
                        <div id="transactionStatus"></div>
                    </div>
                </div>

                <!-- Stats & Info -->
                <div class="col-lg-6">
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <div class="stat-card">
                                <h4>Current Price</h4>
                                <h2 id="currentPriceDisplay">$0.017</h2>
                                <p>USD per AXC</p>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="stat-card">
                                <h4>Phase Progress</h4>
                                <h2 id="phaseProgress">0%</h2>
                                <p>Current Phase</p>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="stat-card">
                                <h4>Tokens Sold</h4>
                                <h2 id="totalSold">0</h2>
                                <p>AXC Tokens</p>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="stat-card">
                                <h4>Your Balance</h4>
                                <h2 id="userTokenBalance">0</h2>
                                <p>AXC Tokens</p>
                            </div>
                        </div>
                    </div>

                    <!-- Contract Info -->
                    <div class="purchase-card">
                        <h4>📄 Contract Information</h4>
                        <div class="mb-3">
                            <strong>Contract Address:</strong><br>
                            <code style="background: rgba(0,0,0,0.3); padding: 5px; border-radius: 5px; word-break: break-all;">
                                0x04e29fdB5c455dB1e546b5eb4FA0bB95216978B2
                            </code>
                        </div>
                        <div class="mb-3">
                            <strong>Network:</strong> Binance Smart Chain (BSC)<br>
                            <strong>Symbol:</strong> AXC<br>
                            <strong>Decimals:</strong> 18
                        </div>
                        <a href="https://bscscan.com/address/0x04e29fdB5c455dB1e546b5eb4FA0bB95216978B2" 
                           target="_blank" 
                           class="default-btn w-100">
                            <span>View on BSCScan</span>
                            <i class='bx bx-link-external'></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Contract Configuration
        const CONTRACT_ADDRESS = '0x04e29fdB5c455dB1e546b5eb4FA0bB95216978B2';
        const CONTRACT_ABI = [
            {
                "inputs": [{"internalType": "string", "name": "code", "type": "string"}],
                "name": "buyWithBNB",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "uint256", "name": "bnbAmount", "type": "uint256"}],
                "name": "calculatePurchase",
                "outputs": [{"components": [{"internalType": "uint256", "name": "usdValue", "type": "uint256"}, {"internalType": "uint256", "name": "feeUsd", "type": "uint256"}, {"internalType": "uint256", "name": "feeBnb", "type": "uint256"}, {"internalType": "uint256", "name": "netUsdValue", "type": "uint256"}, {"internalType": "uint256", "name": "tokens", "type": "uint256"}, {"internalType": "bool", "name": "meetsRequirements", "type": "bool"}], "internalType": "struct AlphaXCoinUUPS.PurchaseResult", "name": "result", "type": "tuple"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getCurrentPhaseInfo",
                "outputs": [{"components": [{"internalType": "uint256", "name": "phaseNumber", "type": "uint256"}, {"internalType": "uint48", "name": "endTime", "type": "uint48"}, {"internalType": "uint256", "name": "priceUSD", "type": "uint256"}, {"internalType": "uint256", "name": "cap", "type": "uint256"}, {"internalType": "uint256", "name": "sold", "type": "uint256"}, {"internalType": "uint256", "name": "remaining", "type": "uint256"}, {"internalType": "bool", "name": "isActive", "type": "bool"}], "internalType": "struct AlphaXCoinUUPS.PhaseInfo", "name": "info", "type": "tuple"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getBNBUSDPrice",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        // Global Variables
        let web3;
        let userAccount;
        let contract;
        let phaseEndTime;
        let currentPhaseInfo;
        let currentBNBPrice = 600; // Default fallback price

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            setupEventListeners();
            loadBNBPrice();
            loadPhaseInfo();
            startTimer();
            initNetworkAnimation();
        });

        // Initialize the application
        async function initializeApp() {
            try {
                if (typeof window.ethereum !== 'undefined') {
                    web3 = new Web3(window.ethereum);
                    contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);
                    
                    // Check if already connected
                    const accounts = await ethereum.request({ method: 'eth_accounts' });
                    if (accounts.length > 0) {
                        userAccount = accounts[0];
                        updateWalletStatus();
                        checkNetwork();
                        loadUserBalance();
                    }
                } else {
                    showStatus('Please install MetaMask wallet', 'error');
                }
            } catch (error) {
                console.error('Initialization error:', error);
                showStatus('Application initialization error', 'error');
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Connect wallet buttons
            document.getElementById('connectWalletNav').addEventListener('click', connectWallet);
            
            // Purchase button
            document.getElementById('purchaseBtn').addEventListener('click', purchaseTokens);
            
            // BNB amount input
            document.getElementById('bnbAmount').addEventListener('input', calculatePurchase);
            
            // Promo code input
            document.getElementById('promoCode').addEventListener('input', calculatePurchase);
            
            // Promo code buttons
            document.querySelectorAll('.promo-code').forEach(button => {
                button.addEventListener('click', function() {
                    selectPromoCode(this.dataset.code);
                });
            });

            // Listen for account changes
            if (window.ethereum) {
                window.ethereum.on('accountsChanged', function(accounts) {
                    if (accounts.length > 0) {
                        userAccount = accounts[0];
                        updateWalletStatus();
                        loadUserBalance();
                    } else {
                        userAccount = null;
                        updateWalletStatus();
                    }
                });

                window.ethereum.on('chainChanged', function(chainId) {
                    checkNetwork();
                });
            }
        }

        // Connect wallet function
        async function connectWallet() {
            try {
                if (typeof window.ethereum !== 'undefined') {
                    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                    userAccount = accounts[0];
                    updateWalletStatus();
                    checkNetwork();
                    loadUserBalance();
                    showStatus('Wallet connected successfully!', 'success');
                } else {
                    showStatus('Please install MetaMask wallet', 'error');
                }
            } catch (error) {
                console.error('Wallet connection error:', error);
                showStatus('Failed to connect wallet', 'error');
            }
        }

        // Update wallet status display
        function updateWalletStatus() {
            const walletStatus = document.getElementById('walletStatus');
            const connectButton = document.getElementById('connectWalletNav');
            const purchaseBtn = document.getElementById('purchaseBtn');

            if (userAccount) {
                walletStatus.innerHTML = `✅ Wallet Connected: ${userAccount.substring(0, 6)}...${userAccount.substring(38)}`;
                walletStatus.className = 'status-message status-success';
                connectButton.innerHTML = '<span>Connected</span> <i class="bx bx-check"></i>';
                connectButton.style.opacity = '0.8';
                purchaseBtn.disabled = false;
            } else {
                walletStatus.innerHTML = '📱 Please connect your MetaMask wallet first';
                walletStatus.className = 'status-message status-warning';
                connectButton.innerHTML = '<span>Connect Wallet</span> <i class="bx bx-wallet"></i>';
                connectButton.style.opacity = '1';
                purchaseBtn.disabled = true;
            }
        }

        // Check network
        async function checkNetwork() {
            try {
                const chainId = await ethereum.request({ method: 'eth_chainId' });
                const networkWarning = document.getElementById('networkWarning');
                
                // BSC Mainnet Chain ID is 0x38 (56 in decimal)
                if (chainId !== '0x38') {
                    networkWarning.style.display = 'block';
                    try {
                        // Try to switch to BSC
                        await ethereum.request({
                            method: 'wallet_switchEthereumChain',
                            params: [{ chainId: '0x38' }]
                        });
                    } catch (switchError) {
                        // If BSC is not added, add it
                        if (switchError.code === 4902) {
                            try {
                                await ethereum.request({
                                    method: 'wallet_addEthereumChain',
                                    params: [{
                                        chainId: '0x38',
                                        chainName: 'Binance Smart Chain',
                                        nativeCurrency: {
                                            name: 'BNB',
                                            symbol: 'BNB',
                                            decimals: 18
                                        },
                                        rpcUrls: ['https://bsc-dataseed.binance.org/'],
                                        blockExplorerUrls: ['https://bscscan.com/']
                                    }]
                                });
                            } catch (addError) {
                                console.error('Network addition error:', addError);
                            }
                        }
                    }
                } else {
                    networkWarning.style.display = 'none';
                }
            } catch (error) {
                console.error('Network check error:', error);
            }
        }

        // Load user balance
        async function loadUserBalance() {
            try {
                if (userAccount && web3) {
                    const balance = await web3.eth.getBalance(userAccount);
                    const bnbBalance = web3.utils.fromWei(balance, 'ether');
                    document.getElementById('userBalance').textContent = `${parseFloat(bnbBalance).toFixed(4)} BNB`;
                }
            } catch (error) {
                console.error('Balance loading error:', error);
            }
        }

        // Load BNB price from multiple sources with better error handling
        async function loadBNBPrice() {
            const startTime = Date.now();
            console.log('🔄 Updating BNB price...');
            
            try {
                // Try contract first (fastest if available)
                if (contract) {
                    try {
                        const contractPrice = await Promise.race([
                            contract.methods.getBNBUSDPrice().call(),
                            new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 3000))
                        ]);
                        
                        if (contractPrice && contractPrice > 0) {
                            const newPrice = parseFloat(contractPrice) / 1e8;
                            if (newPrice > 100 && newPrice < 10000) { // Sanity check
                                currentBNBPrice = newPrice;
                                updatePriceDisplay();
                                console.log(`✅ BNB price from contract: ${currentBNBPrice} (${Date.now() - startTime}ms)`);
                                return currentBNBPrice;
                            }
                        }
                    } catch (contractError) {
                        console.log('⚠️ Contract unavailable, trying APIs...');
                    }
                }

                // Try multiple APIs in parallel for speed
                const apiPromises = [
                    // CoinGecko
                    fetch('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd')
                        .then(r => r.json())
                        .then(data => ({ source: 'CoinGecko', price: data.binancecoin?.usd }))
                        .catch(() => null),
                    
                    // Binance
                    fetch('https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT')
                        .then(r => r.json())
                        .then(data => ({ source: 'Binance', price: parseFloat(data.price) }))
                        .catch(() => null),
                    
                    // CryptoCompare
                    fetch('https://min-api.cryptocompare.com/data/price?fsym=BNB&tsyms=USD')
                        .then(r => r.json())
                        .then(data => ({ source: 'CryptoCompare', price: data.USD }))
                        .catch(() => null)
                ];

                // Wait for first successful response (race condition)
                const results = await Promise.allSettled(apiPromises);
                
                for (const result of results) {
                    if (result.status === 'fulfilled' && result.value && result.value.price) {
                        const { source, price } = result.value;
                        if (price > 100 && price < 10000) { // Sanity check
                            currentBNBPrice = price;
                            updatePriceDisplay();
                            console.log(`✅ BNB price from ${source}: ${currentBNBPrice} (${Date.now() - startTime}ms)`);
                            return currentBNBPrice;
                        }
                    }
                }

                console.log(`⚠️ Using cached price: ${currentBNBPrice}`);
                return currentBNBPrice;

            } catch (error) {
                console.error('❌ BNB price loading error:', error);
                console.log(`⚠️ Using default price: ${currentBNBPrice}`);
                return currentBNBPrice;
            }
        }

        // Update price display
        function updatePriceDisplay() {
            const updateTime = new Date().toLocaleTimeString('en-US');
            document.getElementById('bnbPriceDisplay').innerHTML = `BNB: ${currentBNBPrice.toFixed(2)} <small style="opacity:0.7">(${updateTime})</small>`;
        }

        // Load phase information
        async function loadPhaseInfo() {
            try {
                if (!contract) return;

                const phaseInfo = await contract.methods.getCurrentPhaseInfo().call();
                currentPhaseInfo = phaseInfo;

                // Update phase display
                document.getElementById('currentPhase').textContent = `Phase ${phaseInfo.phaseNumber}`;
                document.getElementById('axcPrice').textContent = `${(phaseInfo.priceUSD / 1000000).toFixed(6)}`;
                document.getElementById('currentPriceDisplay').textContent = `${(phaseInfo.priceUSD / 1000000).toFixed(6)}`;
                
                const soldTokens = phaseInfo.sold / 1e18;
                const remainingTokens = phaseInfo.remaining / 1e18;
                
                document.getElementById('tokensSold').textContent = `${formatNumber(soldTokens)} tokens sold`;
                document.getElementById('tokensRemaining').textContent = `${formatNumber(remainingTokens)} tokens remaining`;
                document.getElementById('totalSold').textContent = formatNumber(soldTokens);

                // Update progress bar
                const progress = (phaseInfo.sold * 100) / phaseInfo.cap;
                document.getElementById('progressBar').style.width = `${progress}%`;
                document.getElementById('phaseProgress').textContent = `${progress.toFixed(1)}%`;

                // Set phase end time for countdown
                phaseEndTime = parseInt(phaseInfo.endTime) * 1000;

            } catch (error) {
                console.error('Phase info loading error:', error);
                // Set demo data if contract call fails
                setDemoData();
            }
        }

        // Set demo data for testing
        function setDemoData() {
            document.getElementById('currentPhase').textContent = 'Phase 1';
            document.getElementById('axcPrice').textContent = '$0.017000';
            document.getElementById('currentPriceDisplay').textContent = '$0.017';
            document.getElementById('tokensSold').textContent = '750,000 tokens sold';
            document.getElementById('tokensRemaining').textContent = '250,000 tokens remaining';
            document.getElementById('totalSold').textContent = '750,000';
            document.getElementById('progressBar').style.width = '75%';
            document.getElementById('phaseProgress').textContent = '75%';
            
            // Set end time to 7 days from now
            phaseEndTime = Date.now() + (7 * 24 * 60 * 60 * 1000);
        }

        // Calculate purchase details with real-time price refresh
        async function calculatePurchase(forceRefresh = false) {
            const bnbAmount = parseFloat(document.getElementById('bnbAmount').value) || 0;
            const calculationDisplay = document.getElementById('calculationDisplay');

            if (bnbAmount <= 0) {
                calculationDisplay.style.display = 'none';
                document.getElementById('usdValue').textContent = '$ 0';
                return;
            }

            try {
                // Update price if needed
                const lastPriceUpdate = localStorage.getItem('lastBNBPriceUpdate') || '0';
                const now = Date.now();
                
                if (forceRefresh || (now - parseInt(lastPriceUpdate)) > 60000) { // 1 minute
                    await loadBNBPrice();
                    localStorage.setItem('lastBNBPriceUpdate', now.toString());
                }

                // Use current BNB price
                let bnbPrice = currentBNBPrice;
                let tokenPrice = 0.017; // Default token price
                
                // Try to get token price from contract
                if (contract && currentPhaseInfo) {
                    try {
                        tokenPrice = currentPhaseInfo.priceUSD / 1e6;
                    } catch (error) {
                        console.log('Using default token price');
                    }
                }

                const usdValue = bnbAmount * bnbPrice;
                const feeAmount = 3.00; // Fixed fee
                const netAmount = Math.max(0, usdValue - feeAmount);
                const tokensReceived = netAmount / tokenPrice;

                // Add promo code bonus if applicable
                const promoCode = document.getElementById('promoCode').value.trim();
                let bonusTokens = 0;
                let totalTokens = tokensReceived;

                if (promoCode && currentPhaseInfo && currentPhaseInfo.phaseNumber > 1) {
                    const promoBonuses = {
                        'Mo3AXC9cl': 500,
                        'Cl1AXC3me': 2000,
                        'Ah5AXC10ng': 5000,
                        'Kh15AXC20bo': 15000,
                        'Ha25AXC40bo': 30000
                    };
                    
                    if (promoBonuses[promoCode]) {
                        bonusTokens = promoBonuses[promoCode];
                        totalTokens = tokensReceived + bonusTokens;
                    }
                }

                // Update display
                const updateTime = new Date().toLocaleTimeString('en-US');
                document.getElementById('currentBNBPrice').innerHTML = `${bnbPrice.toFixed(2)} <small style="opacity:0.7">(${updateTime})</small>`;
                document.getElementById('calculatedUSD').textContent = `${usdValue.toFixed(2)}`;
                document.getElementById('feeAmount').textContent = `${feeAmount.toFixed(2)}`;
                document.getElementById('netAmount').textContent = `${netAmount.toFixed(2)}`;
                document.getElementById('usdValue').textContent = `$ ${usdValue.toFixed(2)}`;
                
                if (bonusTokens > 0) {
                    document.getElementById('tokensReceived').innerHTML = 
                        `${formatNumber(tokensReceived)} AXC + <span style="color: var(--accent-color)">${formatNumber(bonusTokens)} bonus</span> = ${formatNumber(totalTokens)} AXC`;
                } else {
                    document.getElementById('tokensReceived').textContent = `${formatNumber(totalTokens)} AXC`;
                }

                calculationDisplay.style.display = 'block';

            } catch (error) {
                console.error('Purchase calculation error:', error);
                calculationDisplay.style.display = 'none';
            }
        }

        // Manual price update function
        async function updatePriceManually() {
            await calculatePurchase(true);
            showStatus('Price updated successfully!', 'success');
        }

        // Select promo code
        function selectPromoCode(code) {
            document.getElementById('promoCode').value = code;
            
            // Update visual selection
            document.querySelectorAll('.promo-code').forEach(el => {
                el.classList.remove('selected');
            });
            document.querySelector(`[data-code="${code}"]`).classList.add('selected');
            
            calculatePurchase();
        }

        // Purchase tokens
        async function purchaseTokens() {
            const bnbAmount = parseFloat(document.getElementById('bnbAmount').value);
            const promoCode = document.getElementById('promoCode').value.trim();

            if (!userAccount) {
                showStatus('Please connect your wallet first', 'error');
                return;
            }

            if (!bnbAmount || bnbAmount <= 0) {
                showStatus('Please enter a valid amount', 'error');
                return;
            }

            if (bnbAmount < 0.001) {
                showStatus('Minimum purchase is 0.001 BNB', 'error');
                return;
            }

            try {
                showStatus('🔄 Updating current prices...', 'warning');
                document.getElementById('purchaseBtn').disabled = true;
                document.getElementById('purchaseBtn').innerHTML = '<div class="loading"></div> Updating prices...';

                // Update price instantly before transaction
                await loadBNBPrice();
                await loadPhaseInfo();
                
                // Recalculate transaction with updated prices
                await calculatePurchase();
                
                // Show updated price to user
                showStatus(`💰 Updated price: ${currentBNBPrice.toFixed(2)} - Processing transaction...`, 'warning');
                document.getElementById('purchaseBtn').innerHTML = '<div class="loading"></div> Processing...';

                const weiAmount = web3.utils.toWei(bnbAmount.toString(), 'ether');

                // Get contract calculation if available
                let contractCalculation = null;
                try {
                    if (contract.methods.calculatePurchase) {
                        const weiAmountForCalc = web3.utils.toWei(bnbAmount.toString(), 'ether');
                        contractCalculation = await contract.methods.calculatePurchase(weiAmountForCalc).call();
                        console.log('Contract calculations:', contractCalculation);
                    }
                } catch (calcError) {
                    console.log('Cannot get contract calculations, using local calculations');
                }

                const transaction = await contract.methods.buyWithBNB(promoCode).send({
                    from: userAccount,
                    value: weiAmount,
                    gas: 300000
                });

                showStatus(`✅ Transaction successful! Hash: ${transaction.transactionHash.substring(0, 10)}...`, 'success');
                
                // Clear form
                document.getElementById('bnbAmount').value = '';
                document.getElementById('promoCode').value = '';
                document.getElementById('calculationDisplay').style.display = 'none';
                document.getElementById('usdValue').textContent = '$ 0';
                
                // Update info directly
                setTimeout(async () => {
                    await loadPhaseInfo();
                    await loadBNBPrice();
                    await loadUserBalance();
                }, 2000);

            } catch (error) {
                console.error('Purchase error:', error);
                let errorMessage = 'Transaction failed';
                
                if (error.message.includes('insufficient funds')) {
                    errorMessage = 'Insufficient balance in wallet';
                } else if (error.message.includes('user rejected')) {
                    errorMessage = 'Transaction cancelled by user';
                } else if (error.message.includes('gas')) {
                    errorMessage = 'Gas fee error - please try again';
                } else if (error.message.includes('revert')) {
                    errorMessage = 'Smart contract rejected transaction - check purchase conditions';
                }
                
                showStatus(errorMessage, 'error');
            } finally {
                document.getElementById('purchaseBtn').disabled = false;
                document.getElementById('purchaseBtn').innerHTML = '<span>Buy AXC Tokens</span> <i class="bx bx-shopping-bag"></i>';
            }
        }

        // Show status message
        function showStatus(message, type) {
            const statusDiv = document.getElementById('transactionStatus');
            statusDiv.innerHTML = message;
            statusDiv.className = `status-message status-${type}`;
            
            // Auto hide success/error messages after 5 seconds
            if (type !== 'warning') {
                setTimeout(() => {
                    statusDiv.innerHTML = '';
                    statusDiv.className = '';
                }, 5000);
            }
        }

        // Start countdown timer
        function startTimer() {
            // Set initial end time if not set
            if (!phaseEndTime) {
                phaseEndTime = Date.now() + (7 * 24 * 60 * 60 * 1000); // 7 days from now
            }

            function updateTimer() {
                const now = Date.now();
                const timeLeft = phaseEndTime - now;

                if (timeLeft <= 0) {
                    document.getElementById('days').textContent = '00';
                    document.getElementById('hours').textContent = '00';
                    document.getElementById('minutes').textContent = '00';
                    document.getElementById('seconds').textContent = '00';
                    return;
                }

                const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                document.getElementById('days').textContent = days.toString().padStart(2, '0');
                document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
                document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
                document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
            }

            updateTimer();
            setInterval(updateTimer, 1000);
        }

        // Format number with commas
        function formatNumber(num) {
            return new Intl.NumberFormat('en-US').format(Math.floor(num));
        }

        // Network animation
        function initNetworkAnimation() {
            const canvas = document.getElementById('network-canvas');
            const ctx = canvas.getContext('2d');
            
            function resizeCanvas() {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            }
            
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            const particles = [];
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                particles.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    vx: (Math.random() - 0.5) * 0.5,
                    vy: (Math.random() - 0.5) * 0.5,
                    radius: Math.random() * 2 + 1
                });
            }
            
            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Update and draw particles
                particles.forEach(particle => {
                    particle.x += particle.vx;
                    particle.y += particle.vy;
                    
                    if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
                    if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
                    
                    ctx.beginPath();
                    ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
                    ctx.fillStyle = 'rgba(255, 215, 0, 0.3)';
                    ctx.fill();
                });
                
                // Draw connections
                particles.forEach((particle, i) => {
                    particles.slice(i + 1).forEach(otherParticle => {
                        const dx = particle.x - otherParticle.x;
                        const dy = particle.y - otherParticle.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        
                        if (distance < 100) {
                            ctx.beginPath();
                            ctx.moveTo(particle.x, particle.y);
                            ctx.lineTo(otherParticle.x, otherParticle.y);
                            ctx.strokeStyle = `rgba(255, 215, 0, ${0.1 * (1 - distance / 100)})`;
                            ctx.stroke();
                        }
                    });
                });
                
                requestAnimationFrame(animate);
            }
            
            animate();
        }

        // Refresh data every 30 seconds
        setInterval(async () => {
            if (contract) {
                await loadPhaseInfo();
            }
        }, 30000);

        // Refresh BNB price every 2 minutes for real-time updates
        setInterval(async () => {
            await loadBNBPrice();
            // Recalculate if user is entering amount
            const bnbAmount = document.getElementById('bnbAmount').value;
            if (bnbAmount && parseFloat(bnbAmount) > 0) {
                await calculatePurchase();
            }
        }, 120000); // 2 minutes

        // Also refresh price when user focuses on amount input (for active users)
        document.addEventListener('DOMContentLoaded', function() {
            const bnbInput = document.getElementById('bnbAmount');
            if (bnbInput) {
                bnbInput.addEventListener('focus', async function() {
                    const lastUpdate = localStorage.getItem('lastBNBPriceUpdate') || '0';
                    const now = Date.now();
                    // Update if last update was more than 30 seconds ago
                    if ((now - parseInt(lastUpdate)) > 30000) {
                        await loadBNBPrice();
                        localStorage.setItem('lastBNBPriceUpdate', now.toString());
                        if (this.value && parseFloat(this.value) > 0) {
                            await calculatePurchase();
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>
